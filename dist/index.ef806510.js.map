{"mappings":"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","sources":["src/cryptoCompare.js"],"sourcesContent":["const red1 = '#e60049'\nconst red2 = '#b30000'\nconst green1 = '#00bfa0'\nconst green2 = '#50e991'\nconst orange1 = '#ffb55a70'\n\nasync function fetchBTCData() {\n    const queryStringParameters = {\n        tryConversion: 'true',\n        fsym: 'SOL',\n        tsym: 'USD',\n        e: 'CCCAGG',\n        aggregate: '1',\n        aggregatePredictableTimePeriods: 'true',\n        limit: '365',\n        allData: 'false',\n        extraParams: 'my Test APP',\n    }\n\n    let qs = new URLSearchParams(queryStringParameters)\n    let queryStringified = qs.toString()\n\n    try {\n        const response = await fetch(\n            `https://min-api.cryptocompare.com/data/v2/histoday?${queryStringified}`,\n            {\n                method: 'GET',\n                headers: {\n                    Accept: 'application/json',\n                    authorization:\n                        'Apikey authorization: Apikey {f164b8b109893238832587006b37a2ec75e3e296867c1e2795edcf2dc67f8e71}',\n                },\n            }\n        )\n        return await response.json()\n    } catch (error) {\n        console.log('Fetch Error :', error)\n    }\n}\n\nfunction saveToStorage() {\n    localStorage.setItem('toDoList', JSON.stringify(toDoList))\n    console.log(JSON.stringify(localStorage))\n}\n\nfunction loadLocalStorage() {\n    toDoList = JSON.parse(localStorage.getItem('toDoList')) || []\n}\n\nfunction moyenneMobile(array) {\n    let sum = array.reduce((acc, val) => acc + val, 0)\n    return sum / array.length\n}\n\nfunction ecarType(array) {\n    if (array.length <= 1) {\n        return 0 // or handle this case as you see fit\n    }\n    let sum = array.reduce(\n        (acc, val) => acc + Math.pow(val - moyenneMobile(array), 2),\n        0\n    )\n    return Math.sqrt(sum / (array.length - 1))\n}\n\nfunction bollingerUpBar(array, factor) {\n    return moyenneMobile(array) + ecarType(array) * factor\n}\n\nfunction bollingerDownBar(array, factor) {\n    return moyenneMobile(array) - ecarType(array) * factor\n}\n\nfunction formatTimeMonth(timestamp) {\n    let dateObject = new Date(timestamp * 1000)\n\n    let month = (dateObject.getMonth() + 1).toString().padStart(2, '0')\n    let year = dateObject.getFullYear() % 100\n\n    return `${month}/${year}`\n}\n\nfunction formatTimeDays(timestamp) {\n    let dateObject = new Date(timestamp * 1000)\n\n    let day = dateObject.getDate().toString().padStart(2, '0')\n    let month = (dateObject.getMonth() + 1).toString().padStart(2, '0')\n    let year = dateObject.getFullYear() % 100\n\n    return `${day}/${month}/${year}`\n}\n\nfunction formatTime24(timestamp) {\n    let dateObject = new Date(timestamp * 1000)\n\n    let hours = dateObject.getHours().toString().padStart(2, '0')\n    let minutes = dateObject.getMinutes().toString().padStart(2, '0')\n    let seconds = dateObject.getSeconds().toString().padStart(2, '0')\n\n    return `${hours}:${minutes}:${seconds}`\n}\n\nfunction candleStickBarColorSet(data) {\n    return data.map((element) => {\n        return element.open > element.close ? 'red' : 'green'\n    })\n}\n\nfunction renkoColor(data) {\n    return data.map((element, index) => {\n        let prevClose\n        if (index === 0) {\n            prevClose = (element.open + element.close) / 2\n        } else {\n            prevClose = (data[index - 1].open + data[index - 1].close) / 2\n        }\n\n        if (element.close > prevClose) {\n            return green1\n        } else {\n            return red2\n        }\n    })\n}\n\nfunction haBarColorSet(data) {\n    return data.map((element, index) => {\n        let prevClose\n        if (index === 0) {\n            prevClose = (element.open + element.close) / 2\n        } else {\n            prevClose = (data[index - 1].open + data[index - 1].close) / 2\n        }\n\n        if (element.open > prevClose) {\n            return green1\n        } else {\n            return red2\n        }\n    })\n}\n\nasync function processBTCData() {\n    const data = await fetchBTCData()\n\n    const filteredData = data.Data.Data.map((element) => {\n        const { high, low, open, close, time } = element\n\n        return {\n            high,\n            low,\n            open,\n            close,\n            time,\n            average: (element.low + element.high) / 2,\n        }\n    })\n    console.log('filtedData', filteredData)\n\n    const labels = filteredData.map((element) => formatTimeMonth(element.time))\n    const y70 = filteredData.map((element) => (element = 70))\n    const y30 = filteredData.map((element) => (element = 30))\n    const averages = filteredData.map((element) => element.average)\n    const low24group = filteredData.map((element) => element.low)\n    const high24hgroup = filteredData.map((element) => element.high)\n    const open24hgroup = filteredData.map((element) => element.open)\n    const close24hgroup = filteredData.map((element) => element.close)\n\n    const candleHighLow = filteredData.map((element) => [\n        element.low,\n        element.high,\n    ])\n    const candleOpenClose = filteredData.map((element) => [\n        element.open,\n        element.close,\n    ])\n\n    const heikinAshiOC = filteredData.reduce((acc, element, index) => {\n        let prevClose\n        if (index === 0) {\n            prevClose = (element.open + element.close) / 2\n        } else {\n            for (let i = 0; i < acc.length; i++) {\n                const currentCandle = acc[i]\n                prevClose = acc[i - 1]\n                    ? acc[i - 1][1]\n                    : (element.open + element.close) / 2\n            }\n        }\n        const closeHa =\n            (element.open + element.close + element.high + element.low) / 4\n        const openHa = (prevClose + closeHa) / 2\n        return [...acc, [openHa, closeHa]]\n    }, [])\n\n    const heikinAshiHL = filteredData.reduce((acc, element, index) => {\n        let prevClose\n        if (index === 0) {\n            prevClose = (element.open + element.close) / 2\n        } else {\n            for (let i = 0; i < acc.length; i++) {\n                prevClose = acc[i - 1]\n                    ? acc[i - 1][1]\n                    : (element.open + element.close) / 2\n            }\n        }\n        const closeHa =\n            (element.open + element.close + element.high + element.low) / 4\n        const openHa = (prevClose + closeHa) / 2\n        let highHa = Math.max(element.high, openHa, closeHa)\n        let lowHa = Math.min(element.low, openHa, closeHa)\n        return [...acc, [lowHa, highHa]]\n    }, [])\n\n    const renkoData = filteredData.reduce((acc, element, index) => {\n        let renkoValue = 2000\n        let prevClose\n\n        if (index === 0) {\n            prevClose = (element.close + element.open) / 2\n        } else {\n            prevClose = acc[acc.length - 1][1]\n        }\n\n        if (element.close - prevClose >= renkoValue) {\n            acc = [...acc, [prevClose, prevClose + renkoValue]]\n        } else if (element.close - prevClose >= renkoValue * -1) {\n            acc = [...acc, [prevClose, prevClose - renkoValue]]\n        }\n        return [...acc]\n    }, [])\n\n    const renkoLabels = filteredData.reduce((acc, element, index) => {\n        let renkoValue = 2000\n        let prevClose\n\n        if (index === 0) {\n            acc.push(formatTimeDays(element.time))\n        } else {\n            prevClose = acc[acc.length - 1]\n        }\n        if (index === 0) {\n        } else {\n            const prevClose = filteredData[index - 1].close\n\n            if (Math.abs(element.close - prevClose) >= renkoValue) {\n                acc.push(formatTimeMonth(element.time))\n            }\n        }\n\n        return acc\n    }, [])\n\n    let averageBollinger = []\n    let upBoillinger = []\n    let downBoillinger = []\n    const boillingerPeriod = 10 //\n    const boillingerFactor = 2 //\n\n    filteredData.reduce((acc, element, index) => {\n        const close = filteredData\n            .slice(Math.max(0, index - boillingerPeriod + 1), index + 1)\n            .map((data) => data.close)\n\n        if (close.length >= boillingerPeriod) {\n            averageBollinger = [...averageBollinger, moyenneMobile(close)]\n            upBoillinger = [\n                ...upBoillinger,\n                bollingerUpBar(close, boillingerFactor),\n            ]\n            downBoillinger = [\n                ...downBoillinger,\n                bollingerDownBar(close, boillingerFactor),\n            ]\n        } else {\n            averageBollinger.push(null)\n            upBoillinger.push(null)\n            downBoillinger.push(null)\n        }\n\n        return acc\n    }, [])\n\n    let loss = []\n    let gain = []\n    const RSIperiod = 10\n\n    filteredData.reduce((acc, element, index) => {\n        const close = filteredData\n            .slice(Math.max(0, index - RSIperiod + 1), index + 1)\n            .map((data) => data.close)\n\n        if (close.length >= RSIperiod) {\n            const previousClose = close[close.length - 2]\n            const currentClose = close[close.length - 1]\n\n            if (currentClose > previousClose) {\n                gain = [...gain, currentClose - previousClose]\n                loss = [...loss, 0]\n            } else {\n                loss = [...loss, previousClose - currentClose]\n                gain = [...gain, 0]\n            }\n        } else {\n            gain.push(null)\n        }\n        return acc\n    }, [])\n\n    let rsi = []\n\n    gain.reduce((acc, element, index) => {\n        let avgGain = []\n        let avgLoss = []\n        const currentLoss = loss[index]\n\n        if (index >= RSIperiod) {\n            avgGain = [\n                ...avgGain,\n                (acc[0] * (RSIperiod - 1) + element) / RSIperiod,\n            ]\n            avgLoss = [\n                ...avgLoss,\n                (acc[1] * (RSIperiod - 1) + currentLoss) / RSIperiod,\n            ]\n        } else {\n            avgGain = [...avgGain, 0]\n            avgLoss = [...avgLoss, 0]\n        }\n\n        const RS = avgGain / avgLoss\n        const currentRSI = 100 - 100 / (1 + RS)\n        rsi = [...rsi, currentRSI]\n\n        return [avgGain, avgLoss]\n    }, [])\n\n    console.log('rsi', rsi)\n    console.log('gain', gain)\n    const dataForGraph = {\n        labels: labels,\n        datasets: [\n            // {\n            //     label: 'Lowest Price in (EUR)',\n            //     data: low24group,\n            //     backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            //     barPercentage: 1.0, // Adjusts the width of the bars relative to the available space\n            //     categoryPercentage: 1.0,\n            // },\n            // {\n            //     type: 'line',\n            //     label: 'Average Price in (EUR)',\n            //     data: averages,\n            //     backgroundColor: 'white',\n            //     barPercentage: 1.0, // Adjusts the width of the bars relative to the available space\n            //     categoryPercentage: 1.0,\n            //     tension: 1,\n            // },\n            // {\n            //     label: 'Highest Price in (EUR)',\n            //     data: high24hgroup,\n            //     backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            //     barPercentage: 1.0,\n            //     categoryPercentage: 1.0,\n            // },\n            {\n                type: 'bar',\n                label: 'candleHighLow',\n                data: candleHighLow,\n                backgroundColor: candleStickBarColorSet(data.Data.Data),\n                barPercentage: 0.1,\n                categoryPercentage: 1.0,\n            },\n            {\n                type: 'bar',\n                label: 'candleOpenClose',\n                data: candleOpenClose,\n                backgroundColor: candleStickBarColorSet(data.Data.Data),\n                barPercentage: 1,\n                categoryPercentage: 1.0,\n            },\n            // {\n            //     type: 'bar',\n            //     label: 'Open-Close',\n            //     data: heikinAshiOC,\n            //     backgroundColor: haBarColorSet(data.Data.Data),\n            //     barPercentage: 1, // Adjusts the width of the bars relative to the available space\n            //     categoryPercentage: 1,\n            // },\n            // {\n            //     type: 'bar',\n            //     label: 'Low-High',\n            //     data: heikinAshiHL,\n            //     backgroundColor: haBarColorSet(data.Data.Data),\n            //     barPercentage: 0.1,\n            //     categoryPercentage: 1.0,\n            // },\n            {\n                type: 'line',\n                label: 'Moyenne Mobile',\n                data: averageBollinger,\n                backgroundColor: 'white',\n                borderColor: 'white',\n                borderWidth: 0.5,\n            },\n            {\n                type: 'line',\n                label: 'UP Boillinger',\n                data: upBoillinger,\n                backgroundColor: orange1,\n                borderColor: orange1,\n                borderWidth: 0.5,\n                tension: 1,\n            },\n            {\n                type: 'line',\n                label: 'Down Boillinger',\n                data: downBoillinger,\n                backgroundColor: orange1,\n                backgroundColor: orange1,\n                borderColor: orange1,\n                borderWidth: 0.5,\n                tension: 1,\n            },\n            // {\n            //     type: 'bar',\n            //     label: 'Low-High',\n            //     data: renkoData,\n            //     backgroundColor: renkoColor(data.Data.Data),\n            //     barPercentage: 1,\n            //     categoryPercentage: 1.0,\n            // },\n        ],\n    }\n\n    const dataForRSI = {\n        labels: labels,\n        datasets: [\n            {\n                type: 'line',\n                label: 'RSI',\n                data: rsi,\n                backgroundColor: red1,\n                backgroundColor: red1,\n                borderColor: red2,\n                borderWidth: 1,\n                tension: 1,\n            },\n            {\n                type: 'line',\n                label: 'limite',\n                data: y70,\n                backgroundColor: 'yellow',\n                backgroundColor: 'yellow',\n                borderColor: 'yellow',\n                borderWidth: 1,\n                tension: 1,\n            },\n            {\n                type: 'line',\n                label: 'limite',\n                data: y30,\n                backgroundColor: 'yellow',\n                backgroundColor: 'yellow',\n                borderColor: 'yellow',\n                borderWidth: 1,\n                tension: 1,\n            },\n        ],\n    }\n    const ctx = document.getElementById('myChart').getContext('2d')\n    const ctx2 = document.getElementById('myRSI').getContext('2d')\n    new Chart(ctx, {\n        data: dataForGraph,\n        type: 'line',\n        options: {\n            elements: {\n                point: {\n                    radius: 0,\n                },\n            },\n            indexAxis: 'x',\n            responsive: true,\n            scales: {\n                x: {\n                    stacked: true,\n                    grid: {\n                        // color: 'white',\n                        width: 1,\n                    },\n                    ticks: {\n                        font: {\n                            size: 8,\n                        },\n                        color: 'orange',\n                        maxRotation: 0,\n                        minRotation: 0,\n                    },\n                },\n                y: {\n                    ticks: {\n                        font: {\n                            size: 8,\n                        },\n                        color: 'orange',\n                    },\n                    grid: {\n                        color: 'grey',\n                    },\n                    beginAtZero: true,\n                    min: Math.min(...low24group),\n                    max: Math.max(...high24hgroup),\n\n                    ticks: {\n                        font: {\n                            size: 8,\n                        },\n                        color: 'orange',\n                        // stepSize: 0.0001,\n                    },\n                },\n            },\n        },\n    })\n    new Chart(ctx2, {\n        data: dataForRSI,\n        type: 'line',\n        options: {\n            elements: {\n                point: {\n                    radius: 0,\n                },\n            },\n            indexAxis: 'x',\n            responsive: true,\n            scales: {\n                x: {\n                    stacked: true,\n                    grid: {\n                        // color: 'white',\n                        width: 1,\n                    },\n                    ticks: {\n                        font: {\n                            size: 8,\n                        },\n                        color: 'orange',\n                        maxRotation: 0,\n                        minRotation: 0,\n                    },\n                },\n                y: {\n                    ticks: {\n                        font: {\n                            size: 8,\n                        },\n                        color: 'orange',\n                    },\n                    grid: {\n                        color: 'grey',\n                    },\n                    beginAtZero: true,\n                    min: 0,\n                    max: 100,\n\n                    ticks: {\n                        font: {\n                            size: 8,\n                        },\n                        color: 'orange',\n                        // stepSize: 0.0001,\n                    },\n                },\n            },\n        },\n    })\n}\n\nasync function getAllCoinList() {\n    try {\n        const response = await fetch(\n            `https://min-api.cryptocompare.com/data/all/coinlist`,\n            {\n                method: 'GET',\n                headers: {\n                    Accept: 'application/json',\n                    authorization:\n                        'Apikey authorization: Apikey {f164b8b109893238832587006b37a2ec75e3e296867c1e2795edcf2dc67f8e71}',\n                },\n            }\n        )\n        console.log(await response.json())\n    } catch (error) {\n        console.log('Fetch Error :', error)\n    }\n}\n\ngetAllCoinList()\n\ndocument.addEventListener('DOMContentLoaded', processBTCData)\n"],"names":[],"version":3,"file":"index.ef806510.js.map","sourceRoot":"/__parcel_source_root/"}